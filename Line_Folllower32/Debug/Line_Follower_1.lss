
Line_Follower_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b56  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000b56  00000bca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000135c  00000000  00000000  00000bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001002  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 ad 03 	call	0x75a	; 0x75a <main>
  7a:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Timer_Voidinit>:
	Output_Compare_Match_Interrupt_Enable
}Timer_Counter_Interrupt_e;


void Timer_Voidinit(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	/*For setting Mode of operation*/
	//READ
	volatile u8 CPY_REG = TCCR0_REG ;
  8c:	e3 e5       	ldi	r30, 0x53	; 83
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	89 83       	std	Y+1, r24	; 0x01
	//Modify For Mode
	CPY_REG &= OPERATION_MODE_TIMER0_CLR_MSK;
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	87 7b       	andi	r24, 0xB7	; 183
  98:	89 83       	std	Y+1, r24	; 0x01
	CPY_REG |= Fast_PWM_op;
  9a:	89 81       	ldd	r24, Y+1	; 0x01
  9c:	88 64       	ori	r24, 0x48	; 72
  9e:	89 83       	std	Y+1, r24	; 0x01
	//Write For Mode
	TCCR0_REG = CPY_REG;
  a0:	e3 e5       	ldi	r30, 0x53	; 83
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	80 83       	st	Z, r24
	CPY_REG = TIMSK_REG;
	CPY_REG &= Interrupt_TIMER0_CLR_MSK;
	CPY_REG |= Overflow_Interrupt_Enable;
	TIMSK_REG = CPY_REG;
	*/
}
  a8:	0f 90       	pop	r0
  aa:	cf 91       	pop	r28
  ac:	df 91       	pop	r29
  ae:	08 95       	ret

000000b0 <Timer_voidON>:

void Timer_voidON(void)
{
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	0f 92       	push	r0
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
	//READ
	volatile u8 CPY_REG = TCCR0_REG ;
  ba:	e3 e5       	ldi	r30, 0x53	; 83
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	89 83       	std	Y+1, r24	; 0x01
	//Modify For pre-scaler
	CPY_REG &= PRESCALER_TIMER0_CLR_MSK;
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	88 7f       	andi	r24, 0xF8	; 248
  c6:	89 83       	std	Y+1, r24	; 0x01
	CPY_REG |= No_Prescaler;
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	89 83       	std	Y+1, r24	; 0x01
	//Write For Mode and pre_scaler
	TCCR0_REG = CPY_REG;
  ce:	e3 e5       	ldi	r30, 0x53	; 83
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	80 83       	st	Z, r24
}
  d6:	0f 90       	pop	r0
  d8:	cf 91       	pop	r28
  da:	df 91       	pop	r29
  dc:	08 95       	ret

000000de <INT_GIE_Enable>:

//***************************************************************************************//


void INT_GIE_Enable (void)
{
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,GIE_PIN);
  e6:	af e5       	ldi	r26, 0x5F	; 95
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	ef e5       	ldi	r30, 0x5F	; 95
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	8c 93       	st	X, r24
}
  f4:	cf 91       	pop	r28
  f6:	df 91       	pop	r29
  f8:	08 95       	ret

000000fa <INT_GIE_Disable>:

void INT_GIE_Disable (void)
{
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT( SREG_REG ,GIE_PIN);
 102:	af e5       	ldi	r26, 0x5F	; 95
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	ef e5       	ldi	r30, 0x5F	; 95
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8f 77       	andi	r24, 0x7F	; 127
 10e:	8c 93       	st	X, r24
}
 110:	cf 91       	pop	r28
 112:	df 91       	pop	r29
 114:	08 95       	ret

00000116 <DIO_u8setPinDirection>:
#define NULL          (void *)0


//Pin by pin
u8 DIO_u8setPinDirection(u8 Copy_u8port , u8 Copy_u8pin , u8 Copy_u8direction)
{
 116:	df 93       	push	r29
 118:	cf 93       	push	r28
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	2a 97       	sbiw	r28, 0x0a	; 10
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	8a 83       	std	Y+2, r24	; 0x02
 12c:	6b 83       	std	Y+3, r22	; 0x03
 12e:	4c 83       	std	Y+4, r20	; 0x04
	/* that's not used as we use a lot of time as we will ask about it in the func
	if (Copy_u8port <=3 && Copy_u8pin <= 7 && Copy_u8direction <= 1)
	better to check the pins first */
	u8 Local_u8errStatus = RT_OK;
 130:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8pin <= PIN_7)
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	88 30       	cpi	r24, 0x08	; 8
 136:	08 f0       	brcs	.+2      	; 0x13a <DIO_u8setPinDirection+0x24>
 138:	fc c0       	rjmp	.+504    	; 0x332 <DIO_u8setPinDirection+0x21c>
	{
		switch (Copy_u8direction)
 13a:	8c 81       	ldd	r24, Y+4	; 0x04
 13c:	28 2f       	mov	r18, r24
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	3a 87       	std	Y+10, r19	; 0x0a
 142:	29 87       	std	Y+9, r18	; 0x09
 144:	89 85       	ldd	r24, Y+9	; 0x09
 146:	9a 85       	ldd	r25, Y+10	; 0x0a
 148:	00 97       	sbiw	r24, 0x00	; 0
 14a:	39 f0       	breq	.+14     	; 0x15a <DIO_u8setPinDirection+0x44>
 14c:	29 85       	ldd	r18, Y+9	; 0x09
 14e:	3a 85       	ldd	r19, Y+10	; 0x0a
 150:	21 30       	cpi	r18, 0x01	; 1
 152:	31 05       	cpc	r19, r1
 154:	09 f4       	brne	.+2      	; 0x158 <DIO_u8setPinDirection+0x42>
 156:	78 c0       	rjmp	.+240    	; 0x248 <DIO_u8setPinDirection+0x132>
 158:	e9 c0       	rjmp	.+466    	; 0x32c <DIO_u8setPinDirection+0x216>
		{
		case INPUT :
			switch (Copy_u8port)
 15a:	8a 81       	ldd	r24, Y+2	; 0x02
 15c:	28 2f       	mov	r18, r24
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	38 87       	std	Y+8, r19	; 0x08
 162:	2f 83       	std	Y+7, r18	; 0x07
 164:	8f 81       	ldd	r24, Y+7	; 0x07
 166:	98 85       	ldd	r25, Y+8	; 0x08
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	91 05       	cpc	r25, r1
 16c:	59 f1       	breq	.+86     	; 0x1c4 <DIO_u8setPinDirection+0xae>
 16e:	2f 81       	ldd	r18, Y+7	; 0x07
 170:	38 85       	ldd	r19, Y+8	; 0x08
 172:	22 30       	cpi	r18, 0x02	; 2
 174:	31 05       	cpc	r19, r1
 176:	2c f4       	brge	.+10     	; 0x182 <DIO_u8setPinDirection+0x6c>
 178:	8f 81       	ldd	r24, Y+7	; 0x07
 17a:	98 85       	ldd	r25, Y+8	; 0x08
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	69 f0       	breq	.+26     	; 0x19a <DIO_u8setPinDirection+0x84>
 180:	60 c0       	rjmp	.+192    	; 0x242 <DIO_u8setPinDirection+0x12c>
 182:	2f 81       	ldd	r18, Y+7	; 0x07
 184:	38 85       	ldd	r19, Y+8	; 0x08
 186:	22 30       	cpi	r18, 0x02	; 2
 188:	31 05       	cpc	r19, r1
 18a:	89 f1       	breq	.+98     	; 0x1ee <DIO_u8setPinDirection+0xd8>
 18c:	8f 81       	ldd	r24, Y+7	; 0x07
 18e:	98 85       	ldd	r25, Y+8	; 0x08
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	91 05       	cpc	r25, r1
 194:	09 f4       	brne	.+2      	; 0x198 <DIO_u8setPinDirection+0x82>
 196:	40 c0       	rjmp	.+128    	; 0x218 <DIO_u8setPinDirection+0x102>
 198:	54 c0       	rjmp	.+168    	; 0x242 <DIO_u8setPinDirection+0x12c>
			{
			case PORT_A :  CLR_BIT(DDRA_REG , Copy_u8pin);    break ;
 19a:	aa e3       	ldi	r26, 0x3A	; 58
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	ea e3       	ldi	r30, 0x3A	; 58
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	48 2f       	mov	r20, r24
 1a6:	8b 81       	ldd	r24, Y+3	; 0x03
 1a8:	28 2f       	mov	r18, r24
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 2e       	mov	r0, r18
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_u8setPinDirection+0xa2>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	0a 94       	dec	r0
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_u8setPinDirection+0x9e>
 1bc:	80 95       	com	r24
 1be:	84 23       	and	r24, r20
 1c0:	8c 93       	st	X, r24
 1c2:	b9 c0       	rjmp	.+370    	; 0x336 <DIO_u8setPinDirection+0x220>
			case PORT_B :  CLR_BIT(DDRB_REG , Copy_u8pin);    break ;
 1c4:	a7 e3       	ldi	r26, 0x37	; 55
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	e7 e3       	ldi	r30, 0x37	; 55
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	48 2f       	mov	r20, r24
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	28 2f       	mov	r18, r24
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 2e       	mov	r0, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_u8setPinDirection+0xcc>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_u8setPinDirection+0xc8>
 1e6:	80 95       	com	r24
 1e8:	84 23       	and	r24, r20
 1ea:	8c 93       	st	X, r24
 1ec:	a4 c0       	rjmp	.+328    	; 0x336 <DIO_u8setPinDirection+0x220>
			case PORT_C :  CLR_BIT(DDRC_REG , Copy_u8pin);    break ;
 1ee:	a4 e3       	ldi	r26, 0x34	; 52
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	e4 e3       	ldi	r30, 0x34	; 52
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	48 2f       	mov	r20, r24
 1fa:	8b 81       	ldd	r24, Y+3	; 0x03
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 2e       	mov	r0, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_u8setPinDirection+0xf6>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_u8setPinDirection+0xf2>
 210:	80 95       	com	r24
 212:	84 23       	and	r24, r20
 214:	8c 93       	st	X, r24
 216:	8f c0       	rjmp	.+286    	; 0x336 <DIO_u8setPinDirection+0x220>
			case PORT_D :  CLR_BIT(DDRD_REG , Copy_u8pin);    break ;
 218:	a1 e3       	ldi	r26, 0x31	; 49
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	e1 e3       	ldi	r30, 0x31	; 49
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_u8setPinDirection+0x120>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_u8setPinDirection+0x11c>
 23a:	80 95       	com	r24
 23c:	84 23       	and	r24, r20
 23e:	8c 93       	st	X, r24
 240:	7a c0       	rjmp	.+244    	; 0x336 <DIO_u8setPinDirection+0x220>
			default : Local_u8errStatus = RT_NOK;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	89 83       	std	Y+1, r24	; 0x01
 246:	77 c0       	rjmp	.+238    	; 0x336 <DIO_u8setPinDirection+0x220>
			}
			break;
		case OUTPUT :
			switch (Copy_u8port)
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	28 2f       	mov	r18, r24
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	3e 83       	std	Y+6, r19	; 0x06
 250:	2d 83       	std	Y+5, r18	; 0x05
 252:	8d 81       	ldd	r24, Y+5	; 0x05
 254:	9e 81       	ldd	r25, Y+6	; 0x06
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	91 05       	cpc	r25, r1
 25a:	49 f1       	breq	.+82     	; 0x2ae <DIO_u8setPinDirection+0x198>
 25c:	2d 81       	ldd	r18, Y+5	; 0x05
 25e:	3e 81       	ldd	r19, Y+6	; 0x06
 260:	22 30       	cpi	r18, 0x02	; 2
 262:	31 05       	cpc	r19, r1
 264:	2c f4       	brge	.+10     	; 0x270 <DIO_u8setPinDirection+0x15a>
 266:	8d 81       	ldd	r24, Y+5	; 0x05
 268:	9e 81       	ldd	r25, Y+6	; 0x06
 26a:	00 97       	sbiw	r24, 0x00	; 0
 26c:	61 f0       	breq	.+24     	; 0x286 <DIO_u8setPinDirection+0x170>
 26e:	5b c0       	rjmp	.+182    	; 0x326 <DIO_u8setPinDirection+0x210>
 270:	2d 81       	ldd	r18, Y+5	; 0x05
 272:	3e 81       	ldd	r19, Y+6	; 0x06
 274:	22 30       	cpi	r18, 0x02	; 2
 276:	31 05       	cpc	r19, r1
 278:	71 f1       	breq	.+92     	; 0x2d6 <DIO_u8setPinDirection+0x1c0>
 27a:	8d 81       	ldd	r24, Y+5	; 0x05
 27c:	9e 81       	ldd	r25, Y+6	; 0x06
 27e:	83 30       	cpi	r24, 0x03	; 3
 280:	91 05       	cpc	r25, r1
 282:	e9 f1       	breq	.+122    	; 0x2fe <DIO_u8setPinDirection+0x1e8>
 284:	50 c0       	rjmp	.+160    	; 0x326 <DIO_u8setPinDirection+0x210>
			{
			case PORT_A :  SET_BIT(DDRA_REG , Copy_u8pin);    break ;
 286:	aa e3       	ldi	r26, 0x3A	; 58
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	ea e3       	ldi	r30, 0x3A	; 58
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	48 2f       	mov	r20, r24
 292:	8b 81       	ldd	r24, Y+3	; 0x03
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 2e       	mov	r0, r18
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_u8setPinDirection+0x18e>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	0a 94       	dec	r0
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_u8setPinDirection+0x18a>
 2a8:	84 2b       	or	r24, r20
 2aa:	8c 93       	st	X, r24
 2ac:	44 c0       	rjmp	.+136    	; 0x336 <DIO_u8setPinDirection+0x220>
			case PORT_B :  SET_BIT(DDRB_REG , Copy_u8pin);    break ;
 2ae:	a7 e3       	ldi	r26, 0x37	; 55
 2b0:	b0 e0       	ldi	r27, 0x00	; 0
 2b2:	e7 e3       	ldi	r30, 0x37	; 55
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	48 2f       	mov	r20, r24
 2ba:	8b 81       	ldd	r24, Y+3	; 0x03
 2bc:	28 2f       	mov	r18, r24
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 2e       	mov	r0, r18
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_u8setPinDirection+0x1b6>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_u8setPinDirection+0x1b2>
 2d0:	84 2b       	or	r24, r20
 2d2:	8c 93       	st	X, r24
 2d4:	30 c0       	rjmp	.+96     	; 0x336 <DIO_u8setPinDirection+0x220>
			case PORT_C :  SET_BIT(DDRC_REG , Copy_u8pin);    break ;
 2d6:	a4 e3       	ldi	r26, 0x34	; 52
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	e4 e3       	ldi	r30, 0x34	; 52
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	48 2f       	mov	r20, r24
 2e2:	8b 81       	ldd	r24, Y+3	; 0x03
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 2e       	mov	r0, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_u8setPinDirection+0x1de>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_u8setPinDirection+0x1da>
 2f8:	84 2b       	or	r24, r20
 2fa:	8c 93       	st	X, r24
 2fc:	1c c0       	rjmp	.+56     	; 0x336 <DIO_u8setPinDirection+0x220>
			case PORT_D :  SET_BIT(DDRD_REG , Copy_u8pin);    break ;
 2fe:	a1 e3       	ldi	r26, 0x31	; 49
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	e1 e3       	ldi	r30, 0x31	; 49
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	48 2f       	mov	r20, r24
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
 30c:	28 2f       	mov	r18, r24
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 2e       	mov	r0, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_u8setPinDirection+0x206>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_u8setPinDirection+0x202>
 320:	84 2b       	or	r24, r20
 322:	8c 93       	st	X, r24
 324:	08 c0       	rjmp	.+16     	; 0x336 <DIO_u8setPinDirection+0x220>
			default : Local_u8errStatus = RT_NOK;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	89 83       	std	Y+1, r24	; 0x01
 32a:	05 c0       	rjmp	.+10     	; 0x336 <DIO_u8setPinDirection+0x220>
			}
			break;
		default : Local_u8errStatus = RT_NOK;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	89 83       	std	Y+1, r24	; 0x01
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_u8setPinDirection+0x220>
		}
	}
	else
	{
		Local_u8errStatus = RT_NOK ;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus ;
 336:	89 81       	ldd	r24, Y+1	; 0x01
}
 338:	2a 96       	adiw	r28, 0x0a	; 10
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
 344:	cf 91       	pop	r28
 346:	df 91       	pop	r29
 348:	08 95       	ret

0000034a <DIO_u8setPinValue>:
u8 DIO_u8setPinValue(u8 Copy_u8port , u8 Copy_u8pin , u8 Copy_u8value)
{
 34a:	df 93       	push	r29
 34c:	cf 93       	push	r28
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
 352:	2a 97       	sbiw	r28, 0x0a	; 10
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	f8 94       	cli
 358:	de bf       	out	0x3e, r29	; 62
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	cd bf       	out	0x3d, r28	; 61
 35e:	8a 83       	std	Y+2, r24	; 0x02
 360:	6b 83       	std	Y+3, r22	; 0x03
 362:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
 364:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8pin <= PIN_7)
 366:	8b 81       	ldd	r24, Y+3	; 0x03
 368:	88 30       	cpi	r24, 0x08	; 8
 36a:	08 f0       	brcs	.+2      	; 0x36e <DIO_u8setPinValue+0x24>
 36c:	fc c0       	rjmp	.+504    	; 0x566 <DIO_u8setPinValue+0x21c>
	{
		switch (Copy_u8value)
 36e:	8c 81       	ldd	r24, Y+4	; 0x04
 370:	28 2f       	mov	r18, r24
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	3a 87       	std	Y+10, r19	; 0x0a
 376:	29 87       	std	Y+9, r18	; 0x09
 378:	89 85       	ldd	r24, Y+9	; 0x09
 37a:	9a 85       	ldd	r25, Y+10	; 0x0a
 37c:	00 97       	sbiw	r24, 0x00	; 0
 37e:	39 f0       	breq	.+14     	; 0x38e <DIO_u8setPinValue+0x44>
 380:	29 85       	ldd	r18, Y+9	; 0x09
 382:	3a 85       	ldd	r19, Y+10	; 0x0a
 384:	21 30       	cpi	r18, 0x01	; 1
 386:	31 05       	cpc	r19, r1
 388:	09 f4       	brne	.+2      	; 0x38c <DIO_u8setPinValue+0x42>
 38a:	78 c0       	rjmp	.+240    	; 0x47c <DIO_u8setPinValue+0x132>
 38c:	e9 c0       	rjmp	.+466    	; 0x560 <DIO_u8setPinValue+0x216>
		{
		case LOW :
			switch (Copy_u8port)
 38e:	8a 81       	ldd	r24, Y+2	; 0x02
 390:	28 2f       	mov	r18, r24
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	38 87       	std	Y+8, r19	; 0x08
 396:	2f 83       	std	Y+7, r18	; 0x07
 398:	8f 81       	ldd	r24, Y+7	; 0x07
 39a:	98 85       	ldd	r25, Y+8	; 0x08
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	91 05       	cpc	r25, r1
 3a0:	59 f1       	breq	.+86     	; 0x3f8 <DIO_u8setPinValue+0xae>
 3a2:	2f 81       	ldd	r18, Y+7	; 0x07
 3a4:	38 85       	ldd	r19, Y+8	; 0x08
 3a6:	22 30       	cpi	r18, 0x02	; 2
 3a8:	31 05       	cpc	r19, r1
 3aa:	2c f4       	brge	.+10     	; 0x3b6 <DIO_u8setPinValue+0x6c>
 3ac:	8f 81       	ldd	r24, Y+7	; 0x07
 3ae:	98 85       	ldd	r25, Y+8	; 0x08
 3b0:	00 97       	sbiw	r24, 0x00	; 0
 3b2:	69 f0       	breq	.+26     	; 0x3ce <DIO_u8setPinValue+0x84>
 3b4:	60 c0       	rjmp	.+192    	; 0x476 <DIO_u8setPinValue+0x12c>
 3b6:	2f 81       	ldd	r18, Y+7	; 0x07
 3b8:	38 85       	ldd	r19, Y+8	; 0x08
 3ba:	22 30       	cpi	r18, 0x02	; 2
 3bc:	31 05       	cpc	r19, r1
 3be:	89 f1       	breq	.+98     	; 0x422 <DIO_u8setPinValue+0xd8>
 3c0:	8f 81       	ldd	r24, Y+7	; 0x07
 3c2:	98 85       	ldd	r25, Y+8	; 0x08
 3c4:	83 30       	cpi	r24, 0x03	; 3
 3c6:	91 05       	cpc	r25, r1
 3c8:	09 f4       	brne	.+2      	; 0x3cc <DIO_u8setPinValue+0x82>
 3ca:	40 c0       	rjmp	.+128    	; 0x44c <DIO_u8setPinValue+0x102>
 3cc:	54 c0       	rjmp	.+168    	; 0x476 <DIO_u8setPinValue+0x12c>
			{
			case PORT_A :  CLR_BIT(PORTA_REG , Copy_u8pin); break ;
 3ce:	ab e3       	ldi	r26, 0x3B	; 59
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	eb e3       	ldi	r30, 0x3B	; 59
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	48 2f       	mov	r20, r24
 3da:	8b 81       	ldd	r24, Y+3	; 0x03
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 2e       	mov	r0, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_u8setPinValue+0xa2>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	0a 94       	dec	r0
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_u8setPinValue+0x9e>
 3f0:	80 95       	com	r24
 3f2:	84 23       	and	r24, r20
 3f4:	8c 93       	st	X, r24
 3f6:	b9 c0       	rjmp	.+370    	; 0x56a <DIO_u8setPinValue+0x220>
			case PORT_B :  CLR_BIT(PORTB_REG , Copy_u8pin); break ;
 3f8:	a8 e3       	ldi	r26, 0x38	; 56
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	e8 e3       	ldi	r30, 0x38	; 56
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	48 2f       	mov	r20, r24
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	28 2f       	mov	r18, r24
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 2e       	mov	r0, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <DIO_u8setPinValue+0xcc>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	0a 94       	dec	r0
 418:	e2 f7       	brpl	.-8      	; 0x412 <DIO_u8setPinValue+0xc8>
 41a:	80 95       	com	r24
 41c:	84 23       	and	r24, r20
 41e:	8c 93       	st	X, r24
 420:	a4 c0       	rjmp	.+328    	; 0x56a <DIO_u8setPinValue+0x220>
			case PORT_C :  CLR_BIT(PORTC_REG , Copy_u8pin); break ;
 422:	a5 e3       	ldi	r26, 0x35	; 53
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	e5 e3       	ldi	r30, 0x35	; 53
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	48 2f       	mov	r20, r24
 42e:	8b 81       	ldd	r24, Y+3	; 0x03
 430:	28 2f       	mov	r18, r24
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	02 2e       	mov	r0, r18
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_u8setPinValue+0xf6>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	0a 94       	dec	r0
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_u8setPinValue+0xf2>
 444:	80 95       	com	r24
 446:	84 23       	and	r24, r20
 448:	8c 93       	st	X, r24
 44a:	8f c0       	rjmp	.+286    	; 0x56a <DIO_u8setPinValue+0x220>
			case PORT_D :  CLR_BIT(PORTD_REG , Copy_u8pin); break ;
 44c:	a2 e3       	ldi	r26, 0x32	; 50
 44e:	b0 e0       	ldi	r27, 0x00	; 0
 450:	e2 e3       	ldi	r30, 0x32	; 50
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	48 2f       	mov	r20, r24
 458:	8b 81       	ldd	r24, Y+3	; 0x03
 45a:	28 2f       	mov	r18, r24
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 2e       	mov	r0, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_u8setPinValue+0x120>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	0a 94       	dec	r0
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_u8setPinValue+0x11c>
 46e:	80 95       	com	r24
 470:	84 23       	and	r24, r20
 472:	8c 93       	st	X, r24
 474:	7a c0       	rjmp	.+244    	; 0x56a <DIO_u8setPinValue+0x220>
			default : Local_u8errStatus = RT_NOK;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	89 83       	std	Y+1, r24	; 0x01
 47a:	77 c0       	rjmp	.+238    	; 0x56a <DIO_u8setPinValue+0x220>
			}
			break;
		case HIGH :
			switch (Copy_u8port)
 47c:	8a 81       	ldd	r24, Y+2	; 0x02
 47e:	28 2f       	mov	r18, r24
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	3e 83       	std	Y+6, r19	; 0x06
 484:	2d 83       	std	Y+5, r18	; 0x05
 486:	8d 81       	ldd	r24, Y+5	; 0x05
 488:	9e 81       	ldd	r25, Y+6	; 0x06
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	91 05       	cpc	r25, r1
 48e:	49 f1       	breq	.+82     	; 0x4e2 <DIO_u8setPinValue+0x198>
 490:	2d 81       	ldd	r18, Y+5	; 0x05
 492:	3e 81       	ldd	r19, Y+6	; 0x06
 494:	22 30       	cpi	r18, 0x02	; 2
 496:	31 05       	cpc	r19, r1
 498:	2c f4       	brge	.+10     	; 0x4a4 <DIO_u8setPinValue+0x15a>
 49a:	8d 81       	ldd	r24, Y+5	; 0x05
 49c:	9e 81       	ldd	r25, Y+6	; 0x06
 49e:	00 97       	sbiw	r24, 0x00	; 0
 4a0:	61 f0       	breq	.+24     	; 0x4ba <DIO_u8setPinValue+0x170>
 4a2:	5b c0       	rjmp	.+182    	; 0x55a <DIO_u8setPinValue+0x210>
 4a4:	2d 81       	ldd	r18, Y+5	; 0x05
 4a6:	3e 81       	ldd	r19, Y+6	; 0x06
 4a8:	22 30       	cpi	r18, 0x02	; 2
 4aa:	31 05       	cpc	r19, r1
 4ac:	71 f1       	breq	.+92     	; 0x50a <DIO_u8setPinValue+0x1c0>
 4ae:	8d 81       	ldd	r24, Y+5	; 0x05
 4b0:	9e 81       	ldd	r25, Y+6	; 0x06
 4b2:	83 30       	cpi	r24, 0x03	; 3
 4b4:	91 05       	cpc	r25, r1
 4b6:	e9 f1       	breq	.+122    	; 0x532 <DIO_u8setPinValue+0x1e8>
 4b8:	50 c0       	rjmp	.+160    	; 0x55a <DIO_u8setPinValue+0x210>
			{
			case PORT_A :  SET_BIT(PORTA_REG , Copy_u8pin); break ;
 4ba:	ab e3       	ldi	r26, 0x3B	; 59
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	eb e3       	ldi	r30, 0x3B	; 59
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	48 2f       	mov	r20, r24
 4c6:	8b 81       	ldd	r24, Y+3	; 0x03
 4c8:	28 2f       	mov	r18, r24
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 2e       	mov	r0, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_u8setPinValue+0x18e>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	0a 94       	dec	r0
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_u8setPinValue+0x18a>
 4dc:	84 2b       	or	r24, r20
 4de:	8c 93       	st	X, r24
 4e0:	44 c0       	rjmp	.+136    	; 0x56a <DIO_u8setPinValue+0x220>
			case PORT_B :  SET_BIT(PORTB_REG , Copy_u8pin); break ;
 4e2:	a8 e3       	ldi	r26, 0x38	; 56
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	e8 e3       	ldi	r30, 0x38	; 56
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	48 2f       	mov	r20, r24
 4ee:	8b 81       	ldd	r24, Y+3	; 0x03
 4f0:	28 2f       	mov	r18, r24
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 2e       	mov	r0, r18
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_u8setPinValue+0x1b6>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	0a 94       	dec	r0
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_u8setPinValue+0x1b2>
 504:	84 2b       	or	r24, r20
 506:	8c 93       	st	X, r24
 508:	30 c0       	rjmp	.+96     	; 0x56a <DIO_u8setPinValue+0x220>
			case PORT_C :  SET_BIT(PORTC_REG , Copy_u8pin); break ;
 50a:	a5 e3       	ldi	r26, 0x35	; 53
 50c:	b0 e0       	ldi	r27, 0x00	; 0
 50e:	e5 e3       	ldi	r30, 0x35	; 53
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	48 2f       	mov	r20, r24
 516:	8b 81       	ldd	r24, Y+3	; 0x03
 518:	28 2f       	mov	r18, r24
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 2e       	mov	r0, r18
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_u8setPinValue+0x1de>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	0a 94       	dec	r0
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_u8setPinValue+0x1da>
 52c:	84 2b       	or	r24, r20
 52e:	8c 93       	st	X, r24
 530:	1c c0       	rjmp	.+56     	; 0x56a <DIO_u8setPinValue+0x220>
			case PORT_D :  SET_BIT(PORTD_REG , Copy_u8pin); break ;
 532:	a2 e3       	ldi	r26, 0x32	; 50
 534:	b0 e0       	ldi	r27, 0x00	; 0
 536:	e2 e3       	ldi	r30, 0x32	; 50
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	48 2f       	mov	r20, r24
 53e:	8b 81       	ldd	r24, Y+3	; 0x03
 540:	28 2f       	mov	r18, r24
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	02 2e       	mov	r0, r18
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_u8setPinValue+0x206>
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	0a 94       	dec	r0
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_u8setPinValue+0x202>
 554:	84 2b       	or	r24, r20
 556:	8c 93       	st	X, r24
 558:	08 c0       	rjmp	.+16     	; 0x56a <DIO_u8setPinValue+0x220>
			default : Local_u8errStatus = RT_NOK;
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	89 83       	std	Y+1, r24	; 0x01
 55e:	05 c0       	rjmp	.+10     	; 0x56a <DIO_u8setPinValue+0x220>
			}
			break;
		default : Local_u8errStatus = RT_NOK;
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	89 83       	std	Y+1, r24	; 0x01
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_u8setPinValue+0x220>
		}
	}
	else
	{
		Local_u8errStatus = RT_NOK ;
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus ;
 56a:	89 81       	ldd	r24, Y+1	; 0x01
}
 56c:	2a 96       	adiw	r28, 0x0a	; 10
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	f8 94       	cli
 572:	de bf       	out	0x3e, r29	; 62
 574:	0f be       	out	0x3f, r0	; 63
 576:	cd bf       	out	0x3d, r28	; 61
 578:	cf 91       	pop	r28
 57a:	df 91       	pop	r29
 57c:	08 95       	ret

0000057e <DIO_u8getPinValue>:
u8 DIO_u8getPinValue(u8 Copy_u8port , u8 Copy_u8pin , u8 * Copy_u8pValue)
{
 57e:	df 93       	push	r29
 580:	cf 93       	push	r28
 582:	cd b7       	in	r28, 0x3d	; 61
 584:	de b7       	in	r29, 0x3e	; 62
 586:	27 97       	sbiw	r28, 0x07	; 7
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	f8 94       	cli
 58c:	de bf       	out	0x3e, r29	; 62
 58e:	0f be       	out	0x3f, r0	; 63
 590:	cd bf       	out	0x3d, r28	; 61
 592:	8a 83       	std	Y+2, r24	; 0x02
 594:	6b 83       	std	Y+3, r22	; 0x03
 596:	5d 83       	std	Y+5, r21	; 0x05
 598:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
 59a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8pValue != NULL && Copy_u8pin <= PIN_7)
 59c:	8c 81       	ldd	r24, Y+4	; 0x04
 59e:	9d 81       	ldd	r25, Y+5	; 0x05
 5a0:	00 97       	sbiw	r24, 0x00	; 0
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <DIO_u8getPinValue+0x28>
 5a4:	78 c0       	rjmp	.+240    	; 0x696 <DIO_u8getPinValue+0x118>
 5a6:	8b 81       	ldd	r24, Y+3	; 0x03
 5a8:	88 30       	cpi	r24, 0x08	; 8
 5aa:	08 f0       	brcs	.+2      	; 0x5ae <DIO_u8getPinValue+0x30>
 5ac:	74 c0       	rjmp	.+232    	; 0x696 <DIO_u8getPinValue+0x118>
	{
		switch (Copy_u8port)
 5ae:	8a 81       	ldd	r24, Y+2	; 0x02
 5b0:	28 2f       	mov	r18, r24
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	3f 83       	std	Y+7, r19	; 0x07
 5b6:	2e 83       	std	Y+6, r18	; 0x06
 5b8:	4e 81       	ldd	r20, Y+6	; 0x06
 5ba:	5f 81       	ldd	r21, Y+7	; 0x07
 5bc:	41 30       	cpi	r20, 0x01	; 1
 5be:	51 05       	cpc	r21, r1
 5c0:	59 f1       	breq	.+86     	; 0x618 <DIO_u8getPinValue+0x9a>
 5c2:	8e 81       	ldd	r24, Y+6	; 0x06
 5c4:	9f 81       	ldd	r25, Y+7	; 0x07
 5c6:	82 30       	cpi	r24, 0x02	; 2
 5c8:	91 05       	cpc	r25, r1
 5ca:	34 f4       	brge	.+12     	; 0x5d8 <DIO_u8getPinValue+0x5a>
 5cc:	2e 81       	ldd	r18, Y+6	; 0x06
 5ce:	3f 81       	ldd	r19, Y+7	; 0x07
 5d0:	21 15       	cp	r18, r1
 5d2:	31 05       	cpc	r19, r1
 5d4:	69 f0       	breq	.+26     	; 0x5f0 <DIO_u8getPinValue+0x72>
 5d6:	5c c0       	rjmp	.+184    	; 0x690 <DIO_u8getPinValue+0x112>
 5d8:	4e 81       	ldd	r20, Y+6	; 0x06
 5da:	5f 81       	ldd	r21, Y+7	; 0x07
 5dc:	42 30       	cpi	r20, 0x02	; 2
 5de:	51 05       	cpc	r21, r1
 5e0:	79 f1       	breq	.+94     	; 0x640 <DIO_u8getPinValue+0xc2>
 5e2:	8e 81       	ldd	r24, Y+6	; 0x06
 5e4:	9f 81       	ldd	r25, Y+7	; 0x07
 5e6:	83 30       	cpi	r24, 0x03	; 3
 5e8:	91 05       	cpc	r25, r1
 5ea:	09 f4       	brne	.+2      	; 0x5ee <DIO_u8getPinValue+0x70>
 5ec:	3d c0       	rjmp	.+122    	; 0x668 <DIO_u8getPinValue+0xea>
 5ee:	50 c0       	rjmp	.+160    	; 0x690 <DIO_u8getPinValue+0x112>
		{
		case PORT_A : * Copy_u8pValue = GET_BIT(PINA_REG , Copy_u8pin); break ;
 5f0:	e9 e3       	ldi	r30, 0x39	; 57
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	28 2f       	mov	r18, r24
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	8b 81       	ldd	r24, Y+3	; 0x03
 5fc:	88 2f       	mov	r24, r24
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	a9 01       	movw	r20, r18
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_u8getPinValue+0x8a>
 604:	55 95       	asr	r21
 606:	47 95       	ror	r20
 608:	8a 95       	dec	r24
 60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_u8getPinValue+0x86>
 60c:	ca 01       	movw	r24, r20
 60e:	81 70       	andi	r24, 0x01	; 1
 610:	ec 81       	ldd	r30, Y+4	; 0x04
 612:	fd 81       	ldd	r31, Y+5	; 0x05
 614:	80 83       	st	Z, r24
 616:	41 c0       	rjmp	.+130    	; 0x69a <DIO_u8getPinValue+0x11c>
		case PORT_B : * Copy_u8pValue = GET_BIT(PINB_REG , Copy_u8pin); break ;
 618:	e6 e3       	ldi	r30, 0x36	; 54
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	28 2f       	mov	r18, r24
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	8b 81       	ldd	r24, Y+3	; 0x03
 624:	88 2f       	mov	r24, r24
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	a9 01       	movw	r20, r18
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_u8getPinValue+0xb2>
 62c:	55 95       	asr	r21
 62e:	47 95       	ror	r20
 630:	8a 95       	dec	r24
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_u8getPinValue+0xae>
 634:	ca 01       	movw	r24, r20
 636:	81 70       	andi	r24, 0x01	; 1
 638:	ec 81       	ldd	r30, Y+4	; 0x04
 63a:	fd 81       	ldd	r31, Y+5	; 0x05
 63c:	80 83       	st	Z, r24
 63e:	2d c0       	rjmp	.+90     	; 0x69a <DIO_u8getPinValue+0x11c>
		case PORT_C : * Copy_u8pValue = GET_BIT(PINC_REG , Copy_u8pin); break ;
 640:	e3 e3       	ldi	r30, 0x33	; 51
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	80 81       	ld	r24, Z
 646:	28 2f       	mov	r18, r24
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	8b 81       	ldd	r24, Y+3	; 0x03
 64c:	88 2f       	mov	r24, r24
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	a9 01       	movw	r20, r18
 652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_u8getPinValue+0xda>
 654:	55 95       	asr	r21
 656:	47 95       	ror	r20
 658:	8a 95       	dec	r24
 65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_u8getPinValue+0xd6>
 65c:	ca 01       	movw	r24, r20
 65e:	81 70       	andi	r24, 0x01	; 1
 660:	ec 81       	ldd	r30, Y+4	; 0x04
 662:	fd 81       	ldd	r31, Y+5	; 0x05
 664:	80 83       	st	Z, r24
 666:	19 c0       	rjmp	.+50     	; 0x69a <DIO_u8getPinValue+0x11c>
		case PORT_D : * Copy_u8pValue = GET_BIT(PIND_REG , Copy_u8pin); break ;
 668:	e0 e3       	ldi	r30, 0x30	; 48
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	28 2f       	mov	r18, r24
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	8b 81       	ldd	r24, Y+3	; 0x03
 674:	88 2f       	mov	r24, r24
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	a9 01       	movw	r20, r18
 67a:	02 c0       	rjmp	.+4      	; 0x680 <DIO_u8getPinValue+0x102>
 67c:	55 95       	asr	r21
 67e:	47 95       	ror	r20
 680:	8a 95       	dec	r24
 682:	e2 f7       	brpl	.-8      	; 0x67c <DIO_u8getPinValue+0xfe>
 684:	ca 01       	movw	r24, r20
 686:	81 70       	andi	r24, 0x01	; 1
 688:	ec 81       	ldd	r30, Y+4	; 0x04
 68a:	fd 81       	ldd	r31, Y+5	; 0x05
 68c:	80 83       	st	Z, r24
 68e:	05 c0       	rjmp	.+10     	; 0x69a <DIO_u8getPinValue+0x11c>
		default : Local_u8errStatus = RT_NOK;
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	89 83       	std	Y+1, r24	; 0x01
 694:	02 c0       	rjmp	.+4      	; 0x69a <DIO_u8getPinValue+0x11c>
		}
	}
	else
	{
		Local_u8errStatus = RT_NOK ;
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus ;
 69a:	89 81       	ldd	r24, Y+1	; 0x01
}
 69c:	27 96       	adiw	r28, 0x07	; 7
 69e:	0f b6       	in	r0, 0x3f	; 63
 6a0:	f8 94       	cli
 6a2:	de bf       	out	0x3e, r29	; 62
 6a4:	0f be       	out	0x3f, r0	; 63
 6a6:	cd bf       	out	0x3d, r28	; 61
 6a8:	cf 91       	pop	r28
 6aa:	df 91       	pop	r29
 6ac:	08 95       	ret

000006ae <SENSOR_vidinit>:
#include "IR_Sensor_int.h"

/***************************************************************************************/

void SENSOR_vidinit(void)
{
 6ae:	df 93       	push	r29
 6b0:	cf 93       	push	r28
 6b2:	cd b7       	in	r28, 0x3d	; 61
 6b4:	de b7       	in	r29, 0x3e	; 62
	//to make the pins output
	DIO_u8setPinDirection(SENSOR_PORT , LEFT_SENSOR_PIN   , INPUT);
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	60 e0       	ldi	r22, 0x00	; 0
 6ba:	40 e0       	ldi	r20, 0x00	; 0
 6bc:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(SENSOR_PORT , RIGHT_SENSOR_PIN  , INPUT);
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	62 e0       	ldi	r22, 0x02	; 2
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(SENSOR_PORT , CENTER_SENSOR_PIN , INPUT);
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	61 e0       	ldi	r22, 0x01	; 1
 6ce:	40 e0       	ldi	r20, 0x00	; 0
 6d0:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_u8setPinDirection>
}
 6d4:	cf 91       	pop	r28
 6d6:	df 91       	pop	r29
 6d8:	08 95       	ret

000006da <DC_MOTORS_vidinit>:
#include "DC_Motors_int.h"

/***************************************************************************************/

void DC_MOTORS_vidinit(void)
{
 6da:	df 93       	push	r29
 6dc:	cf 93       	push	r28
 6de:	cd b7       	in	r28, 0x3d	; 61
 6e0:	de b7       	in	r29, 0x3e	; 62
	//to make the pins output
	DIO_u8setPinDirection(DC_MOTORS_INPUT_PORT , INPUT_1 , OUTPUT);
 6e2:	83 e0       	ldi	r24, 0x03	; 3
 6e4:	60 e0       	ldi	r22, 0x00	; 0
 6e6:	41 e0       	ldi	r20, 0x01	; 1
 6e8:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(DC_MOTORS_INPUT_PORT , INPUT_2 , OUTPUT);
 6ec:	83 e0       	ldi	r24, 0x03	; 3
 6ee:	61 e0       	ldi	r22, 0x01	; 1
 6f0:	41 e0       	ldi	r20, 0x01	; 1
 6f2:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(DC_MOTORS_INPUT_PORT , INPUT_3 , OUTPUT);
 6f6:	83 e0       	ldi	r24, 0x03	; 3
 6f8:	62 e0       	ldi	r22, 0x02	; 2
 6fa:	41 e0       	ldi	r20, 0x01	; 1
 6fc:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(DC_MOTORS_INPUT_PORT , INPUT_4 , OUTPUT);
 700:	83 e0       	ldi	r24, 0x03	; 3
 702:	63 e0       	ldi	r22, 0x03	; 3
 704:	41 e0       	ldi	r20, 0x01	; 1
 706:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_u8setPinDirection>
}
 70a:	cf 91       	pop	r28
 70c:	df 91       	pop	r29
 70e:	08 95       	ret

00000710 <INPUTS_vidCommand>:

/***************************************************************************************/

void INPUTS_vidCommand(u8 Copy_u8cmd1,u8 Copy_u8cmd2,u8 Copy_u8cmd3,u8 Copy_u8cmd4 )
{
 710:	df 93       	push	r29
 712:	cf 93       	push	r28
 714:	00 d0       	rcall	.+0      	; 0x716 <INPUTS_vidCommand+0x6>
 716:	00 d0       	rcall	.+0      	; 0x718 <INPUTS_vidCommand+0x8>
 718:	cd b7       	in	r28, 0x3d	; 61
 71a:	de b7       	in	r29, 0x3e	; 62
 71c:	89 83       	std	Y+1, r24	; 0x01
 71e:	6a 83       	std	Y+2, r22	; 0x02
 720:	4b 83       	std	Y+3, r20	; 0x03
 722:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8setPinValue(DC_MOTORS_INPUT_PORT , INPUT_1 , Copy_u8cmd1);
 724:	83 e0       	ldi	r24, 0x03	; 3
 726:	60 e0       	ldi	r22, 0x00	; 0
 728:	49 81       	ldd	r20, Y+1	; 0x01
 72a:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_u8setPinValue>
	DIO_u8setPinValue(DC_MOTORS_INPUT_PORT , INPUT_2 , Copy_u8cmd2);
 72e:	83 e0       	ldi	r24, 0x03	; 3
 730:	61 e0       	ldi	r22, 0x01	; 1
 732:	4a 81       	ldd	r20, Y+2	; 0x02
 734:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_u8setPinValue>
	DIO_u8setPinValue(DC_MOTORS_INPUT_PORT , INPUT_3 , Copy_u8cmd3);
 738:	83 e0       	ldi	r24, 0x03	; 3
 73a:	62 e0       	ldi	r22, 0x02	; 2
 73c:	4b 81       	ldd	r20, Y+3	; 0x03
 73e:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_u8setPinValue>
	DIO_u8setPinValue(DC_MOTORS_INPUT_PORT , INPUT_4 , Copy_u8cmd4);
 742:	83 e0       	ldi	r24, 0x03	; 3
 744:	63 e0       	ldi	r22, 0x03	; 3
 746:	4c 81       	ldd	r20, Y+4	; 0x04
 748:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_u8setPinValue>

}
 74c:	0f 90       	pop	r0
 74e:	0f 90       	pop	r0
 750:	0f 90       	pop	r0
 752:	0f 90       	pop	r0
 754:	cf 91       	pop	r28
 756:	df 91       	pop	r29
 758:	08 95       	ret

0000075a <main>:
#include "avr/io.h"
#define training_Count 100

/**********************************************************************************************/
void main(void)
{
 75a:	df 93       	push	r29
 75c:	cf 93       	push	r28
 75e:	00 d0       	rcall	.+0      	; 0x760 <main+0x6>
 760:	0f 92       	push	r0
 762:	cd b7       	in	r28, 0x3d	; 61
 764:	de b7       	in	r29, 0x3e	; 62
	u8 Left_Sensor;
	u8 Right_Sensor;
	u8 Center_Sensor;

	DC_MOTORS_vidinit();
 766:	0e 94 6d 03 	call	0x6da	; 0x6da <DC_MOTORS_vidinit>
	SENSOR_vidinit();
 76a:	0e 94 57 03 	call	0x6ae	; 0x6ae <SENSOR_vidinit>

	//Timer 0 Dc Motor
	    //Set OC0 Pin(PB3) as O/p
		DIO_u8setPinDirection(PORT_B , PIN_3 , OUTPUT);
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	63 e0       	ldi	r22, 0x03	; 3
 772:	41 e0       	ldi	r20, 0x01	; 1
 774:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_u8setPinDirection>
		//select timer 0 mode --> Fast PWM
		Timer_Voidinit();
 778:	0e 94 41 00 	call	0x82	; 0x82 <Timer_Voidinit>
		//select compare o/p Mode ==> clear on compare match and set on top
		TCCR0 |= (1<<COM01);
 77c:	a3 e5       	ldi	r26, 0x53	; 83
 77e:	b0 e0       	ldi	r27, 0x00	; 0
 780:	e3 e5       	ldi	r30, 0x53	; 83
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	80 81       	ld	r24, Z
 786:	80 62       	ori	r24, 0x20	; 32
 788:	8c 93       	st	X, r24
		//set initial value in OCR0 = 0 (duty cycle = 0%)
		OCR0 = 0;
 78a:	ec e5       	ldi	r30, 0x5C	; 92
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	10 82       	st	Z, r1
		//select prescaler = 1 --> PWMfrequency = 8 MHZ
		Timer_voidON();
 790:	0e 94 58 00 	call	0xb0	; 0xb0 <Timer_voidON>
		/***********************USING PROXIMITY SENSOR*********************************/
		/*
		 * IF proximity is used it will give out a digital signal so only one and zero signals
		 * can represent the surface
		 * */
		DIO_u8getPinValue(SENSOR_PORT , LEFT_SENSOR_PIN    , &Left_Sensor);
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	9e 01       	movw	r18, r28
 79a:	2f 5f       	subi	r18, 0xFF	; 255
 79c:	3f 4f       	sbci	r19, 0xFF	; 255
 79e:	a9 01       	movw	r20, r18
 7a0:	0e 94 bf 02 	call	0x57e	; 0x57e <DIO_u8getPinValue>
		DIO_u8getPinValue(SENSOR_PORT , RIGHT_SENSOR_PIN   , &Right_Sensor);
 7a4:	9e 01       	movw	r18, r28
 7a6:	2e 5f       	subi	r18, 0xFE	; 254
 7a8:	3f 4f       	sbci	r19, 0xFF	; 255
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	62 e0       	ldi	r22, 0x02	; 2
 7ae:	a9 01       	movw	r20, r18
 7b0:	0e 94 bf 02 	call	0x57e	; 0x57e <DIO_u8getPinValue>
		DIO_u8getPinValue(SENSOR_PORT , CENTER_SENSOR_PIN  , &Center_Sensor);
 7b4:	9e 01       	movw	r18, r28
 7b6:	2d 5f       	subi	r18, 0xFD	; 253
 7b8:	3f 4f       	sbci	r19, 0xFF	; 255
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	61 e0       	ldi	r22, 0x01	; 1
 7be:	a9 01       	movw	r20, r18
 7c0:	0e 94 bf 02 	call	0x57e	; 0x57e <DIO_u8getPinValue>

		Start_Robot_Trainig();
 7c4:	0e 94 4e 04 	call	0x89c	; 0x89c <Start_Robot_Trainig.1293>

       //Move Forward
		if (Left_Sensor == LOW && Center_Sensor==HIGH && Right_Sensor == LOW){
 7c8:	89 81       	ldd	r24, Y+1	; 0x01
 7ca:	88 23       	and	r24, r24
 7cc:	81 f4       	brne	.+32     	; 0x7ee <main+0x94>
 7ce:	8b 81       	ldd	r24, Y+3	; 0x03
 7d0:	81 30       	cpi	r24, 0x01	; 1
 7d2:	69 f4       	brne	.+26     	; 0x7ee <main+0x94>
 7d4:	8a 81       	ldd	r24, Y+2	; 0x02
 7d6:	88 23       	and	r24, r24
 7d8:	51 f4       	brne	.+20     	; 0x7ee <main+0x94>
		INPUTS_vidCommand( HIGH , LOW , HIGH , LOW );
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	41 e0       	ldi	r20, 0x01	; 1
 7e0:	20 e0       	ldi	r18, 0x00	; 0
 7e2:	0e 94 88 03 	call	0x710	; 0x710 <INPUTS_vidCommand>
		OCR0 = 150;
 7e6:	ec e5       	ldi	r30, 0x5C	; 92
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	86 e9       	ldi	r24, 0x96	; 150
 7ec:	80 83       	st	Z, r24
		}

		//Move Left
		if ((Left_Sensor == LOW && Center_Sensor==HIGH && Right_Sensor == HIGH)||(Left_Sensor == LOW && Center_Sensor==LOW && Right_Sensor == HIGH)){
 7ee:	89 81       	ldd	r24, Y+1	; 0x01
 7f0:	88 23       	and	r24, r24
 7f2:	31 f4       	brne	.+12     	; 0x800 <main+0xa6>
 7f4:	8b 81       	ldd	r24, Y+3	; 0x03
 7f6:	81 30       	cpi	r24, 0x01	; 1
 7f8:	19 f4       	brne	.+6      	; 0x800 <main+0xa6>
 7fa:	8a 81       	ldd	r24, Y+2	; 0x02
 7fc:	81 30       	cpi	r24, 0x01	; 1
 7fe:	49 f0       	breq	.+18     	; 0x812 <main+0xb8>
 800:	89 81       	ldd	r24, Y+1	; 0x01
 802:	88 23       	and	r24, r24
 804:	81 f4       	brne	.+32     	; 0x826 <main+0xcc>
 806:	8b 81       	ldd	r24, Y+3	; 0x03
 808:	88 23       	and	r24, r24
 80a:	69 f4       	brne	.+26     	; 0x826 <main+0xcc>
 80c:	8a 81       	ldd	r24, Y+2	; 0x02
 80e:	81 30       	cpi	r24, 0x01	; 1
 810:	51 f4       	brne	.+20     	; 0x826 <main+0xcc>
		INPUTS_vidCommand( HIGH , LOW , LOW , LOW );
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	40 e0       	ldi	r20, 0x00	; 0
 818:	20 e0       	ldi	r18, 0x00	; 0
 81a:	0e 94 88 03 	call	0x710	; 0x710 <INPUTS_vidCommand>
		OCR0 = 150;
 81e:	ec e5       	ldi	r30, 0x5C	; 92
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	86 e9       	ldi	r24, 0x96	; 150
 824:	80 83       	st	Z, r24
		}

		//Move Right
		if ((Left_Sensor == HIGH && Center_Sensor==HIGH && Right_Sensor == LOW)||(Left_Sensor == HIGH && Center_Sensor==LOW && Right_Sensor == LOW)){
 826:	89 81       	ldd	r24, Y+1	; 0x01
 828:	81 30       	cpi	r24, 0x01	; 1
 82a:	31 f4       	brne	.+12     	; 0x838 <main+0xde>
 82c:	8b 81       	ldd	r24, Y+3	; 0x03
 82e:	81 30       	cpi	r24, 0x01	; 1
 830:	19 f4       	brne	.+6      	; 0x838 <main+0xde>
 832:	8a 81       	ldd	r24, Y+2	; 0x02
 834:	88 23       	and	r24, r24
 836:	49 f0       	breq	.+18     	; 0x84a <main+0xf0>
 838:	89 81       	ldd	r24, Y+1	; 0x01
 83a:	81 30       	cpi	r24, 0x01	; 1
 83c:	81 f4       	brne	.+32     	; 0x85e <main+0x104>
 83e:	8b 81       	ldd	r24, Y+3	; 0x03
 840:	88 23       	and	r24, r24
 842:	69 f4       	brne	.+26     	; 0x85e <main+0x104>
 844:	8a 81       	ldd	r24, Y+2	; 0x02
 846:	88 23       	and	r24, r24
 848:	51 f4       	brne	.+20     	; 0x85e <main+0x104>
		INPUTS_vidCommand( LOW , LOW , HIGH , LOW );
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	60 e0       	ldi	r22, 0x00	; 0
 84e:	41 e0       	ldi	r20, 0x01	; 1
 850:	20 e0       	ldi	r18, 0x00	; 0
 852:	0e 94 88 03 	call	0x710	; 0x710 <INPUTS_vidCommand>
		OCR0 = 150;
 856:	ec e5       	ldi	r30, 0x5C	; 92
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	86 e9       	ldi	r24, 0x96	; 150
 85c:	80 83       	st	Z, r24
		}

		//Stop
		if ((Left_Sensor == HIGH && Center_Sensor==HIGH && Right_Sensor == HIGH)||(Left_Sensor == LOW && Center_Sensor==LOW && Right_Sensor == LOW)){
 85e:	89 81       	ldd	r24, Y+1	; 0x01
 860:	81 30       	cpi	r24, 0x01	; 1
 862:	31 f4       	brne	.+12     	; 0x870 <__stack+0x11>
 864:	8b 81       	ldd	r24, Y+3	; 0x03
 866:	81 30       	cpi	r24, 0x01	; 1
 868:	19 f4       	brne	.+6      	; 0x870 <__stack+0x11>
 86a:	8a 81       	ldd	r24, Y+2	; 0x02
 86c:	81 30       	cpi	r24, 0x01	; 1
 86e:	61 f0       	breq	.+24     	; 0x888 <__stack+0x29>
 870:	89 81       	ldd	r24, Y+1	; 0x01
 872:	88 23       	and	r24, r24
 874:	09 f0       	breq	.+2      	; 0x878 <__stack+0x19>
 876:	8e cf       	rjmp	.-228    	; 0x794 <main+0x3a>
 878:	8b 81       	ldd	r24, Y+3	; 0x03
 87a:	88 23       	and	r24, r24
 87c:	09 f0       	breq	.+2      	; 0x880 <__stack+0x21>
 87e:	8a cf       	rjmp	.-236    	; 0x794 <main+0x3a>
 880:	8a 81       	ldd	r24, Y+2	; 0x02
 882:	88 23       	and	r24, r24
 884:	09 f0       	breq	.+2      	; 0x888 <__stack+0x29>
 886:	86 cf       	rjmp	.-244    	; 0x794 <main+0x3a>
		INPUTS_vidCommand( LOW , LOW , LOW , LOW );
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	60 e0       	ldi	r22, 0x00	; 0
 88c:	40 e0       	ldi	r20, 0x00	; 0
 88e:	20 e0       	ldi	r18, 0x00	; 0
 890:	0e 94 88 03 	call	0x710	; 0x710 <INPUTS_vidCommand>
		OCR0 = 0;
 894:	ec e5       	ldi	r30, 0x5C	; 92
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	10 82       	st	Z, r1
 89a:	7c cf       	rjmp	.-264    	; 0x794 <main+0x3a>

0000089c <Start_Robot_Trainig.1293>:
		//set initial value in OCR0 = 0 (duty cycle = 0%)
		OCR0 = 0;
		//select prescaler = 1 --> PWMfrequency = 8 MHZ
		Timer_voidON();

	void Start_Robot_Trainig(void){
 89c:	df 93       	push	r29
 89e:	cf 93       	push	r28
 8a0:	00 d0       	rcall	.+0      	; 0x8a2 <Start_Robot_Trainig.1293+0x6>
 8a2:	cd b7       	in	r28, 0x3d	; 61
 8a4:	de b7       	in	r29, 0x3e	; 62

		u8 training_LoopCount;
		for( training_LoopCount = 0 ; training_LoopCount < training_Count ; training_LoopCount++ )
 8a6:	1a 82       	std	Y+2, r1	; 0x02
 8a8:	57 c0       	rjmp	.+174    	; 0x958 <Start_Robot_Trainig.1293+0xbc>
		{
			u8 random_action;
			random_action = (u8)rand();
 8aa:	0e 94 06 05 	call	0xa0c	; 0xa0c <rand>
 8ae:	89 83       	std	Y+1, r24	; 0x01

				if(random_action==0)
 8b0:	89 81       	ldd	r24, Y+1	; 0x01
 8b2:	88 23       	and	r24, r24
 8b4:	a1 f4       	brne	.+40     	; 0x8de <Start_Robot_Trainig.1293+0x42>
				{
					//Move Forward
					INPUTS_vidCommand( HIGH , LOW , HIGH , LOW );
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	60 e0       	ldi	r22, 0x00	; 0
 8ba:	41 e0       	ldi	r20, 0x01	; 1
 8bc:	20 e0       	ldi	r18, 0x00	; 0
 8be:	0e 94 88 03 	call	0x710	; 0x710 <INPUTS_vidCommand>
					OCR0 = 150;
 8c2:	ec e5       	ldi	r30, 0x5C	; 92
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	86 e9       	ldi	r24, 0x96	; 150
 8c8:	80 83       	st	Z, r24

					//Stop
					INPUTS_vidCommand( LOW , LOW , LOW , LOW );
 8ca:	80 e0       	ldi	r24, 0x00	; 0
 8cc:	60 e0       	ldi	r22, 0x00	; 0
 8ce:	40 e0       	ldi	r20, 0x00	; 0
 8d0:	20 e0       	ldi	r18, 0x00	; 0
 8d2:	0e 94 88 03 	call	0x710	; 0x710 <INPUTS_vidCommand>
					OCR0 = 0;
 8d6:	ec e5       	ldi	r30, 0x5C	; 92
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	10 82       	st	Z, r1
 8dc:	3a c0       	rjmp	.+116    	; 0x952 <Start_Robot_Trainig.1293+0xb6>
				}
				else if(random_action==1)
 8de:	89 81       	ldd	r24, Y+1	; 0x01
 8e0:	81 30       	cpi	r24, 0x01	; 1
 8e2:	a1 f4       	brne	.+40     	; 0x90c <Start_Robot_Trainig.1293+0x70>
				{
					//Turn Right
					INPUTS_vidCommand( LOW , LOW , HIGH , LOW );
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	60 e0       	ldi	r22, 0x00	; 0
 8e8:	41 e0       	ldi	r20, 0x01	; 1
 8ea:	20 e0       	ldi	r18, 0x00	; 0
 8ec:	0e 94 88 03 	call	0x710	; 0x710 <INPUTS_vidCommand>
					OCR0 = 150;
 8f0:	ec e5       	ldi	r30, 0x5C	; 92
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	86 e9       	ldi	r24, 0x96	; 150
 8f6:	80 83       	st	Z, r24

					//Stop
					INPUTS_vidCommand( LOW , LOW , LOW , LOW );
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	60 e0       	ldi	r22, 0x00	; 0
 8fc:	40 e0       	ldi	r20, 0x00	; 0
 8fe:	20 e0       	ldi	r18, 0x00	; 0
 900:	0e 94 88 03 	call	0x710	; 0x710 <INPUTS_vidCommand>
					OCR0 = 0;				}
 904:	ec e5       	ldi	r30, 0x5C	; 92
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	10 82       	st	Z, r1
 90a:	23 c0       	rjmp	.+70     	; 0x952 <Start_Robot_Trainig.1293+0xb6>

				else if(random_action==2)
 90c:	89 81       	ldd	r24, Y+1	; 0x01
 90e:	82 30       	cpi	r24, 0x02	; 2
 910:	a1 f4       	brne	.+40     	; 0x93a <Start_Robot_Trainig.1293+0x9e>
				{
					//Turn Left

					INPUTS_vidCommand( HIGH , LOW , LOW , LOW );
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	60 e0       	ldi	r22, 0x00	; 0
 916:	40 e0       	ldi	r20, 0x00	; 0
 918:	20 e0       	ldi	r18, 0x00	; 0
 91a:	0e 94 88 03 	call	0x710	; 0x710 <INPUTS_vidCommand>
					OCR0 = 150;
 91e:	ec e5       	ldi	r30, 0x5C	; 92
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	86 e9       	ldi	r24, 0x96	; 150
 924:	80 83       	st	Z, r24

					//Stop
					INPUTS_vidCommand( LOW , LOW , LOW , LOW );
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	60 e0       	ldi	r22, 0x00	; 0
 92a:	40 e0       	ldi	r20, 0x00	; 0
 92c:	20 e0       	ldi	r18, 0x00	; 0
 92e:	0e 94 88 03 	call	0x710	; 0x710 <INPUTS_vidCommand>
					OCR0 = 0;				}
 932:	ec e5       	ldi	r30, 0x5C	; 92
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	10 82       	st	Z, r1
 938:	0c c0       	rjmp	.+24     	; 0x952 <Start_Robot_Trainig.1293+0xb6>
				else if(random_action==3)
 93a:	89 81       	ldd	r24, Y+1	; 0x01
 93c:	83 30       	cpi	r24, 0x03	; 3
 93e:	49 f4       	brne	.+18     	; 0x952 <Start_Robot_Trainig.1293+0xb6>
				{
					//Stop
					INPUTS_vidCommand( LOW , LOW , LOW , LOW );
 940:	80 e0       	ldi	r24, 0x00	; 0
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	40 e0       	ldi	r20, 0x00	; 0
 946:	20 e0       	ldi	r18, 0x00	; 0
 948:	0e 94 88 03 	call	0x710	; 0x710 <INPUTS_vidCommand>
					OCR0 = 0;
 94c:	ec e5       	ldi	r30, 0x5C	; 92
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	10 82       	st	Z, r1
		Timer_voidON();

	void Start_Robot_Trainig(void){

		u8 training_LoopCount;
		for( training_LoopCount = 0 ; training_LoopCount < training_Count ; training_LoopCount++ )
 952:	8a 81       	ldd	r24, Y+2	; 0x02
 954:	8f 5f       	subi	r24, 0xFF	; 255
 956:	8a 83       	std	Y+2, r24	; 0x02
 958:	8a 81       	ldd	r24, Y+2	; 0x02
 95a:	84 36       	cpi	r24, 0x64	; 100
 95c:	08 f4       	brcc	.+2      	; 0x960 <Start_Robot_Trainig.1293+0xc4>
 95e:	a5 cf       	rjmp	.-182    	; 0x8aa <Start_Robot_Trainig.1293+0xe>
					//Stop
					INPUTS_vidCommand( LOW , LOW , LOW , LOW );
					OCR0 = 0;
				}
		}
	}
 960:	0f 90       	pop	r0
 962:	0f 90       	pop	r0
 964:	cf 91       	pop	r28
 966:	df 91       	pop	r29
 968:	08 95       	ret

0000096a <do_rand>:
 96a:	a0 e0       	ldi	r26, 0x00	; 0
 96c:	b0 e0       	ldi	r27, 0x00	; 0
 96e:	eb eb       	ldi	r30, 0xBB	; 187
 970:	f4 e0       	ldi	r31, 0x04	; 4
 972:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__prologue_saves__+0x10>
 976:	ec 01       	movw	r28, r24
 978:	a8 80       	ld	r10, Y
 97a:	b9 80       	ldd	r11, Y+1	; 0x01
 97c:	ca 80       	ldd	r12, Y+2	; 0x02
 97e:	db 80       	ldd	r13, Y+3	; 0x03
 980:	a1 14       	cp	r10, r1
 982:	b1 04       	cpc	r11, r1
 984:	c1 04       	cpc	r12, r1
 986:	d1 04       	cpc	r13, r1
 988:	41 f4       	brne	.+16     	; 0x99a <do_rand+0x30>
 98a:	84 e2       	ldi	r24, 0x24	; 36
 98c:	a8 2e       	mov	r10, r24
 98e:	89 ed       	ldi	r24, 0xD9	; 217
 990:	b8 2e       	mov	r11, r24
 992:	8b e5       	ldi	r24, 0x5B	; 91
 994:	c8 2e       	mov	r12, r24
 996:	87 e0       	ldi	r24, 0x07	; 7
 998:	d8 2e       	mov	r13, r24
 99a:	c6 01       	movw	r24, r12
 99c:	b5 01       	movw	r22, r10
 99e:	2d e1       	ldi	r18, 0x1D	; 29
 9a0:	33 ef       	ldi	r19, 0xF3	; 243
 9a2:	41 e0       	ldi	r20, 0x01	; 1
 9a4:	50 e0       	ldi	r21, 0x00	; 0
 9a6:	0e 94 35 05 	call	0xa6a	; 0xa6a <__divmodsi4>
 9aa:	27 ea       	ldi	r18, 0xA7	; 167
 9ac:	31 e4       	ldi	r19, 0x41	; 65
 9ae:	40 e0       	ldi	r20, 0x00	; 0
 9b0:	50 e0       	ldi	r21, 0x00	; 0
 9b2:	0e 94 16 05 	call	0xa2c	; 0xa2c <__mulsi3>
 9b6:	7b 01       	movw	r14, r22
 9b8:	8c 01       	movw	r16, r24
 9ba:	c6 01       	movw	r24, r12
 9bc:	b5 01       	movw	r22, r10
 9be:	2d e1       	ldi	r18, 0x1D	; 29
 9c0:	33 ef       	ldi	r19, 0xF3	; 243
 9c2:	41 e0       	ldi	r20, 0x01	; 1
 9c4:	50 e0       	ldi	r21, 0x00	; 0
 9c6:	0e 94 35 05 	call	0xa6a	; 0xa6a <__divmodsi4>
 9ca:	ca 01       	movw	r24, r20
 9cc:	b9 01       	movw	r22, r18
 9ce:	2c ee       	ldi	r18, 0xEC	; 236
 9d0:	34 ef       	ldi	r19, 0xF4	; 244
 9d2:	4f ef       	ldi	r20, 0xFF	; 255
 9d4:	5f ef       	ldi	r21, 0xFF	; 255
 9d6:	0e 94 16 05 	call	0xa2c	; 0xa2c <__mulsi3>
 9da:	6e 0d       	add	r22, r14
 9dc:	7f 1d       	adc	r23, r15
 9de:	80 1f       	adc	r24, r16
 9e0:	91 1f       	adc	r25, r17
 9e2:	97 ff       	sbrs	r25, 7
 9e4:	04 c0       	rjmp	.+8      	; 0x9ee <do_rand+0x84>
 9e6:	61 50       	subi	r22, 0x01	; 1
 9e8:	70 40       	sbci	r23, 0x00	; 0
 9ea:	80 40       	sbci	r24, 0x00	; 0
 9ec:	90 48       	sbci	r25, 0x80	; 128
 9ee:	68 83       	st	Y, r22
 9f0:	79 83       	std	Y+1, r23	; 0x01
 9f2:	8a 83       	std	Y+2, r24	; 0x02
 9f4:	9b 83       	std	Y+3, r25	; 0x03
 9f6:	9b 01       	movw	r18, r22
 9f8:	3f 77       	andi	r19, 0x7F	; 127
 9fa:	c9 01       	movw	r24, r18
 9fc:	cd b7       	in	r28, 0x3d	; 61
 9fe:	de b7       	in	r29, 0x3e	; 62
 a00:	ea e0       	ldi	r30, 0x0A	; 10
 a02:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__epilogue_restores__+0x10>

00000a06 <rand_r>:
 a06:	0e 94 b5 04 	call	0x96a	; 0x96a <do_rand>
 a0a:	08 95       	ret

00000a0c <rand>:
 a0c:	80 e6       	ldi	r24, 0x60	; 96
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0e 94 b5 04 	call	0x96a	; 0x96a <do_rand>
 a14:	08 95       	ret

00000a16 <srand>:
 a16:	a0 e0       	ldi	r26, 0x00	; 0
 a18:	b0 e0       	ldi	r27, 0x00	; 0
 a1a:	80 93 60 00 	sts	0x0060, r24
 a1e:	90 93 61 00 	sts	0x0061, r25
 a22:	a0 93 62 00 	sts	0x0062, r26
 a26:	b0 93 63 00 	sts	0x0063, r27
 a2a:	08 95       	ret

00000a2c <__mulsi3>:
 a2c:	62 9f       	mul	r22, r18
 a2e:	d0 01       	movw	r26, r0
 a30:	73 9f       	mul	r23, r19
 a32:	f0 01       	movw	r30, r0
 a34:	82 9f       	mul	r24, r18
 a36:	e0 0d       	add	r30, r0
 a38:	f1 1d       	adc	r31, r1
 a3a:	64 9f       	mul	r22, r20
 a3c:	e0 0d       	add	r30, r0
 a3e:	f1 1d       	adc	r31, r1
 a40:	92 9f       	mul	r25, r18
 a42:	f0 0d       	add	r31, r0
 a44:	83 9f       	mul	r24, r19
 a46:	f0 0d       	add	r31, r0
 a48:	74 9f       	mul	r23, r20
 a4a:	f0 0d       	add	r31, r0
 a4c:	65 9f       	mul	r22, r21
 a4e:	f0 0d       	add	r31, r0
 a50:	99 27       	eor	r25, r25
 a52:	72 9f       	mul	r23, r18
 a54:	b0 0d       	add	r27, r0
 a56:	e1 1d       	adc	r30, r1
 a58:	f9 1f       	adc	r31, r25
 a5a:	63 9f       	mul	r22, r19
 a5c:	b0 0d       	add	r27, r0
 a5e:	e1 1d       	adc	r30, r1
 a60:	f9 1f       	adc	r31, r25
 a62:	bd 01       	movw	r22, r26
 a64:	cf 01       	movw	r24, r30
 a66:	11 24       	eor	r1, r1
 a68:	08 95       	ret

00000a6a <__divmodsi4>:
 a6a:	97 fb       	bst	r25, 7
 a6c:	09 2e       	mov	r0, r25
 a6e:	05 26       	eor	r0, r21
 a70:	0e d0       	rcall	.+28     	; 0xa8e <__divmodsi4_neg1>
 a72:	57 fd       	sbrc	r21, 7
 a74:	04 d0       	rcall	.+8      	; 0xa7e <__divmodsi4_neg2>
 a76:	4b d0       	rcall	.+150    	; 0xb0e <__udivmodsi4>
 a78:	0a d0       	rcall	.+20     	; 0xa8e <__divmodsi4_neg1>
 a7a:	00 1c       	adc	r0, r0
 a7c:	38 f4       	brcc	.+14     	; 0xa8c <__divmodsi4_exit>

00000a7e <__divmodsi4_neg2>:
 a7e:	50 95       	com	r21
 a80:	40 95       	com	r20
 a82:	30 95       	com	r19
 a84:	21 95       	neg	r18
 a86:	3f 4f       	sbci	r19, 0xFF	; 255
 a88:	4f 4f       	sbci	r20, 0xFF	; 255
 a8a:	5f 4f       	sbci	r21, 0xFF	; 255

00000a8c <__divmodsi4_exit>:
 a8c:	08 95       	ret

00000a8e <__divmodsi4_neg1>:
 a8e:	f6 f7       	brtc	.-4      	; 0xa8c <__divmodsi4_exit>
 a90:	90 95       	com	r25
 a92:	80 95       	com	r24
 a94:	70 95       	com	r23
 a96:	61 95       	neg	r22
 a98:	7f 4f       	sbci	r23, 0xFF	; 255
 a9a:	8f 4f       	sbci	r24, 0xFF	; 255
 a9c:	9f 4f       	sbci	r25, 0xFF	; 255
 a9e:	08 95       	ret

00000aa0 <__prologue_saves__>:
 aa0:	2f 92       	push	r2
 aa2:	3f 92       	push	r3
 aa4:	4f 92       	push	r4
 aa6:	5f 92       	push	r5
 aa8:	6f 92       	push	r6
 aaa:	7f 92       	push	r7
 aac:	8f 92       	push	r8
 aae:	9f 92       	push	r9
 ab0:	af 92       	push	r10
 ab2:	bf 92       	push	r11
 ab4:	cf 92       	push	r12
 ab6:	df 92       	push	r13
 ab8:	ef 92       	push	r14
 aba:	ff 92       	push	r15
 abc:	0f 93       	push	r16
 abe:	1f 93       	push	r17
 ac0:	cf 93       	push	r28
 ac2:	df 93       	push	r29
 ac4:	cd b7       	in	r28, 0x3d	; 61
 ac6:	de b7       	in	r29, 0x3e	; 62
 ac8:	ca 1b       	sub	r28, r26
 aca:	db 0b       	sbc	r29, r27
 acc:	0f b6       	in	r0, 0x3f	; 63
 ace:	f8 94       	cli
 ad0:	de bf       	out	0x3e, r29	; 62
 ad2:	0f be       	out	0x3f, r0	; 63
 ad4:	cd bf       	out	0x3d, r28	; 61
 ad6:	09 94       	ijmp

00000ad8 <__epilogue_restores__>:
 ad8:	2a 88       	ldd	r2, Y+18	; 0x12
 ada:	39 88       	ldd	r3, Y+17	; 0x11
 adc:	48 88       	ldd	r4, Y+16	; 0x10
 ade:	5f 84       	ldd	r5, Y+15	; 0x0f
 ae0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ae2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ae4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ae6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ae8:	aa 84       	ldd	r10, Y+10	; 0x0a
 aea:	b9 84       	ldd	r11, Y+9	; 0x09
 aec:	c8 84       	ldd	r12, Y+8	; 0x08
 aee:	df 80       	ldd	r13, Y+7	; 0x07
 af0:	ee 80       	ldd	r14, Y+6	; 0x06
 af2:	fd 80       	ldd	r15, Y+5	; 0x05
 af4:	0c 81       	ldd	r16, Y+4	; 0x04
 af6:	1b 81       	ldd	r17, Y+3	; 0x03
 af8:	aa 81       	ldd	r26, Y+2	; 0x02
 afa:	b9 81       	ldd	r27, Y+1	; 0x01
 afc:	ce 0f       	add	r28, r30
 afe:	d1 1d       	adc	r29, r1
 b00:	0f b6       	in	r0, 0x3f	; 63
 b02:	f8 94       	cli
 b04:	de bf       	out	0x3e, r29	; 62
 b06:	0f be       	out	0x3f, r0	; 63
 b08:	cd bf       	out	0x3d, r28	; 61
 b0a:	ed 01       	movw	r28, r26
 b0c:	08 95       	ret

00000b0e <__udivmodsi4>:
 b0e:	a1 e2       	ldi	r26, 0x21	; 33
 b10:	1a 2e       	mov	r1, r26
 b12:	aa 1b       	sub	r26, r26
 b14:	bb 1b       	sub	r27, r27
 b16:	fd 01       	movw	r30, r26
 b18:	0d c0       	rjmp	.+26     	; 0xb34 <__udivmodsi4_ep>

00000b1a <__udivmodsi4_loop>:
 b1a:	aa 1f       	adc	r26, r26
 b1c:	bb 1f       	adc	r27, r27
 b1e:	ee 1f       	adc	r30, r30
 b20:	ff 1f       	adc	r31, r31
 b22:	a2 17       	cp	r26, r18
 b24:	b3 07       	cpc	r27, r19
 b26:	e4 07       	cpc	r30, r20
 b28:	f5 07       	cpc	r31, r21
 b2a:	20 f0       	brcs	.+8      	; 0xb34 <__udivmodsi4_ep>
 b2c:	a2 1b       	sub	r26, r18
 b2e:	b3 0b       	sbc	r27, r19
 b30:	e4 0b       	sbc	r30, r20
 b32:	f5 0b       	sbc	r31, r21

00000b34 <__udivmodsi4_ep>:
 b34:	66 1f       	adc	r22, r22
 b36:	77 1f       	adc	r23, r23
 b38:	88 1f       	adc	r24, r24
 b3a:	99 1f       	adc	r25, r25
 b3c:	1a 94       	dec	r1
 b3e:	69 f7       	brne	.-38     	; 0xb1a <__udivmodsi4_loop>
 b40:	60 95       	com	r22
 b42:	70 95       	com	r23
 b44:	80 95       	com	r24
 b46:	90 95       	com	r25
 b48:	9b 01       	movw	r18, r22
 b4a:	ac 01       	movw	r20, r24
 b4c:	bd 01       	movw	r22, r26
 b4e:	cf 01       	movw	r24, r30
 b50:	08 95       	ret

00000b52 <_exit>:
 b52:	f8 94       	cli

00000b54 <__stop_program>:
 b54:	ff cf       	rjmp	.-2      	; 0xb54 <__stop_program>
